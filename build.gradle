buildscript  {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.1.0'
    classpath group: 'org.rythmengine', name: 'rythm-engine', version: '1.0-b9'
            
  }
}

import java.io.InputStream
import java.io.FileInputStream
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl
import org.hl7.fhir.tools.publisher.Publisher
import org.hl7.fhir.instance.model.AtomFeed
import org.hl7.fhir.definitions.model.ResourceDefn
import org.hl7.fhir.tools.publisher.Navigation
import org.hl7.fhir.utilities.CSFileInputStream
import org.hl7.fhir.definitions.model.Example.ExampleType
import org.hl7.fhir.instance.formats.XmlParser
import org.hl7.fhir.instance.formats.JsonComposer
import org.hl7.fhir.instance.formats.XmlComposer
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import groovyx.gpars.GParsPool
import org.rythmengine.Rythm

Rythm.init(["home.template": project.file("templates")])

ext {
  fhirBuildDir = fhirBuildDir
  destDir = fhirBuildDir + "/publish"
  pub = new Publisher()
  page = null
}
class ResourceTask extends DefaultTask {
    def resource = null
    def getSourceDir() {"$project.fhirBuildDir/source/${resource.name.toLowerCase()}"}
    def getOutputFiles() {"$project.fhirBuildDir/publish/${resource.name.toLowerCase()}.htm"}

    @InputFiles def getResourceDir(){
      project.fileTree(this.sourceDir)
    }

    @TaskAction def act(){
      didWork = true
    }
}

class ExampleTask extends DefaultTask {
    def resource = null
    def example = null

    def parseXml(InputStream is) {
        def instance = new XmlParser().parseGeneral(is)
        return instance.resource ?: instance.feed
    }

    def getInstance(){
       parseXml(new FileInputStream(example.path))
    }

    def getOutputFileBase(){
      project.destDir+"/"+example.fileTitle
    }

    @InputFile def getResourceDir(){
      project.file(example.path)
    }

    @TaskAction def act(){
      didWork = true
    }
}

def createTasks() {

  // For each resource, create a tracking task
  page.resources.each{ r ->
    generateResources.dependsOn task("resource-${r.name}", type: ResourceTask) {
      println("Defining task for resource ${r.name}")
      resource = r
      println "$outputFiles"
      outputs.files(outputFiles)
    }
  }


  // For each example file belonging to each resource
  // create a tracking task
  page.resources.each { r ->
    r.examples.findAll {
		 it.type == ExampleType.XmlFile
    }.each { e ->
      generateExamples.dependsOn task("example-${r.name}-${e.name}", type: ExampleTask){
        resource = r
        example = e
      }
    }
  }

}

task generateNewSource << {
  generateSource()
  ant.copy(todir: new File(projectDir, "/buildSrc/src/main/java/org/hl7/fhir/instance/")) {
    fileset(dir:fhirBuildDir+"/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance") {
            exclude(name: "**/client/")
            exclude(name: "**/test/FHIR*") }

  }
  println("Rebuilt client source.")
}

task buildAndPublish(type: GradleBuild) {
  buildFile='build.gradle'
  tasks = ['publish']

  def props = project.gradle.startParameter.newBuild()
  props.projectProperties = project.gradle.startParameter.projectProperties
  startParameter = props
}

buildAndPublish.dependsOn generateNewSource

def generateSource(){
  pub.registerReferencePlatforms();
  def eCorePath = pub.page.folders.dstDir + "ECoreDefinitions.xml";
  pub.generateECore(pub.prsr.eCoreParseResults, eCorePath);

  def resource = new XMIResourceImpl();
  resource.load(new CSFileInputStream(eCorePath), null)
  def eCoreDefs = resource.contents[0]

  for (def gen : page.referenceImplementations) {
    println("Produce " + gen.name + " Reference Implementation");
    String implDir = page.folders.implDir(gen.name);
    if (!gen.isECoreGenerator()) {
      gen.generate(
        page.definitions,
        destDir, 
        implDir,
        page.version,
        page.genDate.time,
        page,
        page.svnRevision);
    } else {
      gen.generate(eCoreDefs, destDir, implDir, page);
    }
  }
}

task generateResources << {
  if (dependsOnTaskDidWork())
    resources()
}

def writeFile(fileName, contents){
  PrintWriter out 
  out = new PrintWriter(fileName)
  out.print(contents)
  out.close()
}

task generateExamples << {

  def allExamples = dependsOn.findAll {
      it instanceof ExampleTask && it.didWork
  }

  allExamples.each { e ->

    println("Serialize ${e.example.path}")

    def json = serializeJson(e.instance)
    writeFile(e.outputFileBase+".json", json)

    def xml = serializeXml(e.instance)
    writeFile(e.outputFileBase+".xml", xml)

    String html = Rythm.render("example.html.rythm", [
      resource: e.resource.name,
      exampleId: e.example.id ?: "example",
      xml: xml,
      json: json
    ])
    writeFile(e.outputFileBase+".html", html)

  } 
}

def resources(){
  println("Doing e resources: " + page.definitions.sortedResourceNames())

  def rs = page.definitions.sortedResourceNames().findAll {
    it != "ValueSet"
  } collect {
    page.definitions.resources[it]
  }

  def t0 = new Date().getTime()
  GParsPool.withPool 2, {
    rs.each { r -> 
      println ("R1 resource: $r.name")
      pub.produceResource1(r);      
    }
  }

  pub.produceBaseProfile()
  GParsPool.withPool 2, {
    rs.eachParallel { r -> 
      println ("R2 resource: $r.name")
      pub.produceResource2(r);      
    }
  }
  def t1 = new Date().getTime()
  println("deltat: " + (t1-t0))
}

task publish
publish.dependsOn generateResources
publish.dependsOn generateExamples

// Below this line is pure glue to the FHIR build tool
preparePub()
createTasks()
AtomFeed makeFeed(String idSlug, String selfSlug, String title) {
  def feed = new AtomFeed();
  feed.setId("http://hl7.org/fhir/profile/$idSlug");
  feed.setTitle(title);
  feed.links["self"] = "http://hl7.org/implement/standards/fhir/${selfSlug}.xml";
  feed.setUpdated(Calendar.instance);
  return feed
}

def preparePub(){
  pub.initialize(fhirBuildDir)
  page = pub.page
 
  page.breadCrumbManager.parse(page.folders.srcDir+"heirarchy.xml");
  pub.prsr.parse(pub.page.genDate, pub.page.version);
  pub.defineSpecialValues();
  pub.validate()
  page.navigation = new Navigation();
  page.navigation.parse(page.folders.srcDir + "navigation.xml");

  pub.profileFeed = makeFeed(
        "resources",
        "profiles-resources",
        "Resources as Profiles")

  pub.typeFeed = makeFeed(
        "types",
        "profiles-types",
        "Resources as Profiles")

  pub.valueSetsFeed = makeFeed(
        "valuesets",
        "valuesets",
        "FHIR Core Valuesets")

  pub.loadValueSets()
  page.metaClass.resources = page.definitions.resources.collect {k,v->v}
  return pub
}


def serializeJson(r) {
    ByteArrayOutputStream jsonStream = new ByteArrayOutputStream()
    new JsonComposer().compose(jsonStream, r, true)
    jsonStream.toString()
}

def serializeXml(r) {
    ByteArrayOutputStream xmlStream = new ByteArrayOutputStream()
    new XmlComposer().compose(xmlStream, r, true)
    xmlStream.toString()
}
