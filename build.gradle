import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl
import org.hl7.fhir.tools.publisher.Publisher
import org.hl7.fhir.instance.model.AtomFeed
import org.hl7.fhir.definitions.model.ResourceDefn
import org.hl7.fhir.tools.publisher.Navigation
import org.hl7.fhir.utilities.CSFileInputStream


buildscript  {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.1.0'
  }
}

import groovyx.gpars.GParsPool

ext {
  folder = fhirBuildDir
  pub = new Publisher();
  page = null;
  destDir = ""
}

task generateNewSource << {
  println("tracer top build")
  genSource()

  ant.copy(todir: new File(projectDir, "/buildSrc/src/main/java/org/hl7/fhir/instance/")) {
    fileset(dir:folder+"/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance") {
            exclude(name: "**/client/")
            exclude(name: "**/test/FHIR*")
    }

  }
  println("Executed!")
}


task generateDocs(type: GradleBuild) {
  buildFile='build.gradle'
  tasks = ['generateDocsReal']

  def props = project.gradle.startParameter.newBuild()
  props.projectProperties = project.gradle.startParameter.projectProperties
  startParameter = props
}

task generateDocsReal << {
  new BuildTool("In gendocs")
}

generateDocs.dependsOn generateNewSource

def genSource(){

  preparePub()

  pub.registerReferencePlatforms();
  def eCorePath = pub.page.folders.dstDir + "ECoreDefinitions.xml";
  pub.generateECore(pub.prsr.eCoreParseResults, eCorePath);

  def resource = new XMIResourceImpl();
  resource.load(new CSFileInputStream(eCorePath), null)
  def eCoreDefs = resource.contents[0]

  for (def gen : page.referenceImplementations) {
    println("Produce " + gen.name + " Reference Implementation");
    String implDir = page.folders.implDir(gen.name);
    if (!gen.isECoreGenerator())
      gen.generate(page.definitions, destDir, implDir, page.version, page.genDate.time, page, page.svnRevision);
    else
      gen.generate(eCoreDefs, destDir, implDir, page);
  }
}

AtomFeed makeFeed(String idSlug, String selfSlug, String title) {
  def feed = new AtomFeed();
  feed.setId("http://hl7.org/fhir/profile/$idSlug");
  feed.setTitle(title);
  feed.links["self"] = "http://hl7.org/implement/standards/fhir/${selfSlug}.xml";
  feed.setUpdated(Calendar.instance);
  return feed
}

def preparePub(){
  pub.initialize(folder)
  page = pub.page
  destDir = pub.page.folders.dstDir;
 
  page.breadCrumbManager.parse(page.folders.srcDir+"heirarchy.xml");
  pub.prsr.parse(pub.page.genDate, pub.page.version);
  pub.defineSpecialValues();
  pub.validate()
  page.navigation = new Navigation();
  page.navigation.parse(page.folders.srcDir + "navigation.xml");

  pub.profileFeed = makeFeed(
        "resources",
        "profiles-resources",
        "Resources as Profiles")

  pub.typeFeed = makeFeed(
        "types",
        "profiles-types",
        "Resources as Profiles")

  pub.valueSetsFeed = makeFeed(
        "valuesets",
        "valuesets",
        "FHIR Core Valuesets")

  pub.loadValueSets()
 
  return pub
}

task generateResources << {
  resources()
}

def resources(){
  preparePub()
  println("Doing e resources: " + page.definitions.sortedResourceNames())

  def rNames = page.definitions.sortedResourceNames().findAll {
    it != "ValueSet"
  } collect {
    page.definitions.resources[it]
  }


  def t0 = new Date().getTime()
  GParsPool.withPool 2, {
    rNames.each { r -> 
      println ("R1 resource: $r.name")
      pub.produceResource1(r);      
    }
  }

  pub.produceBaseProfile()
  GParsPool.withPool 2, {
    rNames.eachParallel { r -> 
	println ("R2 resource: $r.name")
	pub.produceResource2(r);      
    }
  }
  def t1 = new Date().getTime()
  println("deltat: " + (t1-t0))
}
